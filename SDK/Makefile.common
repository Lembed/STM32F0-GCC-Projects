#Library
FREERTOS = $(COMMON)FreeRTOS/Source/
FATFS = $(COMMON)FatFs/Src/
CMSIS = $(COMMON)Drivers/CMSIS/
HAL_SRC = $(COMMON)Drivers/STM32F0xx_HAL_Driver/Src/
INCLUDE += -I$(CMSIS)Device/ST/STM32F0xx/Include -I$(CMSIS)Include -I$(COMMON)Drivers/STM32F0xx_HAL_Driver/Inc

SRCS += $(wildcard $(HAL_SRC)*.c)
#Just Stuff
OBJS = $(SRCS:%.c=%.o) $(STARTUP:%.s=%.o)

#FreeRTOS source list
FREERTOSS = $(wildcard $(FREERTOS)*.c)

#FatFs source list
FATFSS = $(wildcard $(FATFS)*.c)

#Executables
PREFIX = arm-none-eabi
CC = $(PREFIX)-gcc
OPENOCD = openocd
RM = rm -f

#Compiler Flags
CFLAGS = -mcpu=cortex-m0 -march=armv6-m -mthumb -mfloat-abi=soft --specs=nosys.specs 
CFLAGS += -fno-strict-aliasing -fdata-sections -ffunction-sections -mlong-calls
CFLAGS += -Wall -g -Os
CFLAGS += $(DEFINES)

#Linker Flags (are given gcc)
LDFLAGS = -specs=nano.specs -Wl,--gc-sections
LDFLAGS += -Wl,-script="$(LINKER_FILE)" -Wl,-Map=$(PROJ_NAME).map

#Rules
.PHONY:clean
.SECONDARY:


%.o: %.c
	$(CC) $(CFLAGS) -o $@  -c $< $(INCLUDE)

%.o: %.s
	$(CC) $(CFLAGS) -o $@  -c $< $(INCLUDE)

all: $(PROJ_NAME).elf clang-complete

%.elf: $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LDFLAGS)

flash: all
	openocd -f ./openocd.cfg \
	-c "init" \
	-c "reset init" \
	-c "halt" \
	-c "flash write_image erase $(PROJ_NAME).elf" \
	-c "verify_image $(PROJ_NAME).elf" \
	-c "reset run" -c shutdown

clang-complete:
	echo $(INCLUDE)>.clang_complete

clean:
	$(RM) $(OBJS) $(PROJ_NAME).elf $(PROJ_NAME).map .clang_complete

